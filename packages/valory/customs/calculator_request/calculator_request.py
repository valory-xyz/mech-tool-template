# -*- coding: utf-8 -*-
# ------------------------------------------------------------------------------
#
#   Copyright 2023-2024 Valory AG
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
# ------------------------------------------------------------------------------
"""Contains the tool definitions"""

from typing import Any, Dict, Optional, Tuple


def add(a, b):
    return a + b


def multiply(a, b):
    return a * b


AVAILABLE_TOOLS = {
    "add": add,
    "multiply": multiply
}


def error_response(msg: str) -> Tuple[str, None, None, None]:
    """Return an error mech response."""
    return msg, None, None, None


def run(**kwargs) -> Tuple[Optional[str], Optional[Dict[str, Any]], Any, Any]:
    """Run the task

    Returns:
    - Response to send to the user
    - [Optional] Prompt sent to the model
    - [Optional] Transaction generated by the tool to be executed by the mech
    - [Optional] Cost calculation object
    """

    # Check that the tool has been specified
    tool_name = kwargs.get("tool", None)

    if tool_name is None:
        return error_response("No tool has been specified.")

    # Check that the tool is available
    tool = AVAILABLE_TOOLS.get(tool_name, None)
    if tool is None:
        return error_response(
            f"Tool {tool_name!r} is not in supported tools: {tuple(AVAILABLE_TOOLS.keys())}."
        )

    # Check that first_number and second_number are numbers
    first_number = kwargs.get("first_number", None)
    second_number = kwargs.get("second_number", None)

    if not isinstance(first_number, (int, float)) or not isinstance(second_number, (int, float)):
        return error_response("first_number and second_number must be number")

    response = tool(first_number, second_number)

    # Response, prompt, transaction, cost
    return str(response), None, None, None
